quarkus.http.port=18080
quarkus.tls.trust-all=true

quarkus.artemis.enabled=true
quarkus.pooled-jms.transaction=enabled

#mp.messaging.incoming.channel-inn.auto.offset.reset=earliest
#mp.messaging.incoming.channel-inn.topic=${myapp.topic}
mp.messaging.outgoing.channel-out.topic=${myapp.topic}

myapp.topic=my-topic
myapp.queue=my-queue

#quarkus.vault.url=X
#quarkus.vault.authentication.client-token=${VAULT_TOKEN}
#quarkus.vault.kv-secret-engine-version=1
#quarkus.vault.secret-config-kv-path.kafka_oauth=X

#quarkus.artemis.url=(X)?protocolManagerFactoryStr=org.apache.activemq.artemis.core.protocol.hornetq.client.HornetQClientProtocolManagerFactory
#quarkus.artemis.username=X
#quarkus.artemis.password=X

avro.codegen.stringType=CharSequence

#camel.component.kafka.brokers=${kafka.bootstrap.servers}
#camel.component.kafka.security-protocol=${kafka.security.protocol}
#camel.component.kafka.sasl-mechanism=${mp.messaging.connector.smallrye-kafka.sasl.mechanism}
#camel.component.kafka.sasl-jaas-config=${mp.messaging.connector.smallrye-kafka.sasl.jaas.config}
camel.component.kafka.schema-registry-u-r-l=${mp.messaging.connector.smallrye-kafka.schema.registry.url}
camel.component.kafka.value-deserializer=${mp.messaging.connector.smallrye-kafka.value.deserializer}
camel.component.kafka.value-serializer=${mp.messaging.connector.smallrye-kafka.value.serializer}
#camel.component.kafka.groupId=${kafka.group.id}
#camel.component.kafka.additional-properties[sasl.login.callback.handler.class]=${mp.messaging.connector.smallrye-kafka.sasl.login.callback.handler.class}
#camel.component.kafka.additional-properties[auto.register.schemas]=${mp.messaging.connector.smallrye-kafka.auto.register.schemas}
#camel.component.kafka.additional-properties[normalize.schemas]=${mp.messaging.connector.smallrye-kafka.normalize.schemas}
#camel.component.kafka.additional-properties[specific.avro.reader]=${mp.messaging.connector.smallrye-kafka.specific.avro.reader}

#mp.messaging.connector.smallrye-kafka.cloud-events-source=X
#mp.messaging.connector.smallrye-kafka.client-id-prefix=${kafka_oauth.clientid}--
#mp.messaging.connector.smallrye-kafka.health-topic-verification-enabled=true
mp.messaging.connector.smallrye-kafka.value.deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
mp.messaging.connector.smallrye-kafka.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
#mp.messaging.connector.smallrye-kafka.subject.name.strategy=io.confluent.kafka.serializers.subject.TopicNameStrategy
#mp.messaging.connector.smallrye-kafka.schema.registry.url=X
#mp.messaging.connector.smallrye-kafka.auto.register.schemas=true
#mp.messaging.connector.smallrye-kafka.normalize.schemas=true
#mp.messaging.connector.smallrye-kafka.specific.avro.reader=true
#mp.messaging.connector.smallrye-kafka.sasl.mechanism=OAUTHBEARER
#mp.messaging.connector.smallrye-kafka.sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler
#mp.messaging.connector.smallrye-kafka.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required oauth.client.id="${kafka_oauth.clientid}" oauth.client.secret="${kafka_oauth.clientsecret}" oauth.token.endpoint.uri="X" ;

#kafka.bootstrap.servers=X
#kafka.ssl.truststore.type=JKS
#kafka.ssl.truststore.location=X
#kafka.security.protocol=SASL_SSL
#kafka.group.id=X
#kafka.auto.offset.reset=latest